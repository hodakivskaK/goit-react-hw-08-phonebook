{"version":3,"file":"static/js/240.2fb45d36.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","redux/contacts/contactsSelector.js","redux/filter/filterSelector.js","webpack://react-homework-template/./src/components/style/section.module.css?9b28","components/Section.jsx","webpack://react-homework-template/./src/components/style/ContactForm.module.css?9005","components/ContactForm.jsx","components/Filter.jsx","webpack://react-homework-template/./src/components/style/contacts.module.css?51d3","components/Contacts.jsx","components/Phonebook.jsx","pages/PhoneBookPage.js"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","export const getContacts =  state => state.contacts.entities;\n\n","\nexport const getFilter = state => state.filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"section\":\"section_section__gIN5V\"};","import PropTypes from 'prop-types';\nimport s from './style/section.module.css'\n\nexport const Section = ({ title, children }) => {\n    return <section className={s.section}><h1>{title}</h1>\n        {children}\n    </section>\n    \n}\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};","// extracted by mini-css-extract-plugin\nexport default {\"formBtn\":\"ContactForm_formBtn__OSOQ0\"};","import { useState, useEffect } from \"react\";\nimport { nanoid } from 'nanoid'\nimport styleForm from \"./style/ContactForm.module.css\"\n\n\nexport const Form = ({ onSubmit }) => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const nameId = nanoid();\n  const numberId = nanoid();\n\n   const handleChange = (e) => {\n    const { name, value } = e.currentTarget;\n     switch (name) {\n      case \"name\":\n      setName(value)\n      break;\n       \n      case \"number\":\n      setNumber(value)\n      break;\n       \n      default:\n      break;\n     }\n     \n  }\n\n  const handleSubmit = (e) => {\n     e.preventDefault()\n        e.currentTarget.reset()\n    onSubmit(name, number)\n  }\n\n\n   useEffect(() => {\n    return () => {\n      setName(\"\")\n      setNumber(\"\")\n    };\n  }, [setName, setNumber]);\n\n\n   return <form onSubmit={handleSubmit}>\n        <label htmlFor={nameId}>\n          Name:\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^^[A-Za-z\\u0080-\\uFFFF ']+$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            onChange={handleChange}\n            id={nameId}\n            required\n          />\n        </label> \n\n        <label htmlFor={numberId}>\n          Number:\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"^(\\+?[0-9.\\(\\)\\-\\s]*)$\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            onChange={handleChange}\n            id={numberId}\n            required\n          />\n        </label>\n\n        <button type='submit' className={styleForm.formBtn}>Add contact</button>\n      </form>\n    }\n\n\n\n","import PropTypes from 'prop-types';\n\nexport const Filter = ({ filterId, value, onChange }) => {\n    return   <label htmlFor={filterId}>\n          Find contacts by name\n        <input type=\"text\" name=\"filter\" onChange={onChange} value={value}\n     \n            required />\n          </label>\n    \n}\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n};","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"contacts_contactList__x7a9r\",\"contactItem\":\"contacts_contactItem__VuRBc\",\"contact__btn\":\"contacts_contact__btn__GgRc4\"};","import PropTypes from 'prop-types';\nimport s from \"./style/contacts.module.css\"\nimport { useDispatch } from \"react-redux\";\n\nimport {  deleteContact } from \"redux/contacts/contactsOperation\";\n\nexport const Contacts = ({ contacts }) => {\n  const dispatch = useDispatch();\n  \n    const onDeleteContact = (id) => {\n    dispatch(deleteContact(id));\n  }\n \n    return <ul className={s.contactList}> {contacts.map(({ name, number, id}) =>\n          (<li key={id} className={s.contactItem}>\n      <p>{name} <br />\n        {number}</p>\n        \n        <button type=\"button\" onClick={() => onDeleteContact(id)} className={s.contact__btn}> Delete</button>\n          </li>\n          ))}\n          \n        </ul> \n}\n\n\nContacts.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n};\n","import { nanoid } from 'nanoid'\nimport { useSelector, useDispatch } from 'react-redux'\n\n\nimport { setFilter } from 'redux/filter/filterSlice'\nimport { addContact} from 'redux/contacts/contactsOperation'\nimport { getContacts } from 'redux/contacts/contactsSelector'\nimport { getFilter } from 'redux/filter/filterSelector'\n\n\nimport { Section } from './Section'\nimport { Form } from './ContactForm'\nimport { Filter } from './Filter'\nimport { Contacts } from './Contacts'\n\n\nexport const Phonebook = () => {\n  \n  const contacts = useSelector(getContacts);\n  const filterState = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n\n  const filterId = nanoid()\n\n  // Send new contacts\n  const formSubmit = ( name, number ) => {\n     const contact = {\n      id: nanoid(),\n      name,\n      number,\n    };\n\n    if (name.length === 0 || number.length === 0) {\n      return alert(`Field is empty`);\n    }\n\n    if (contacts.find(contact => contact.name.toLowerCase() === name.toLowerCase())) {\n       return alert(`${name} is already in contacts.`);\n    }\n\n    if (contacts.find(contact => contact.number === number)) {\n       return alert(`Number: ${number} is already in contacts.`);\n    }\n\n    dispatch(addContact(contact))  \n  }\n  \n\n    // Send new filter for search contact \n  const searchContact = (e) => {\n    dispatch(setFilter(e.currentTarget.value))\n  }\n\n      // Condition visible \n  const getVisibleContacts = () => {\n    const normalizedFilter = filterState.toLowerCase();\n\n    return contacts.filter(contact =>\n       contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  }\n    \n  return <>\n    \n      <Section title=\"Phonebooks\">\n        <Form onSubmit={formSubmit} />\n      </Section>\n\n      \n      <Section title=\"Contacts\" >\n        {contacts.length > 1 && (\n        <Filter filterId={filterId} value={filterState} onChange={searchContact} />\n        \n        )}\n       \n    \n        {contacts.length > 0 ?\n          <Contacts contacts={getVisibleContacts()} /> :\n          <p>The phonebook is empty 😔</p>\n        }\n             \n      </Section>\n    </>\n  \n}\n\n","import { Helmet } from 'react-helmet';\n\nimport { useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport { fetchContacts } from 'redux/contacts/contactsOperation'\nimport { Phonebook } from 'components/Phonebook';\n\n\nexport default function PhoneBookPage(){\n      const dispatch = useDispatch();\n\n      useEffect(() => {\n    dispatch(fetchContacts())\n      }, [dispatch])\n    \n      \n    \n    return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <Phonebook />\n  \n   </>\n  );\n  \n}\n"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","getContacts","state","contacts","entities","getFilter","filter","Section","title","children","className","s","Form","onSubmit","useState","name","setName","number","setNumber","nameId","numberId","handleChange","e","currentTarget","value","useEffect","preventDefault","reset","htmlFor","type","pattern","onChange","required","styleForm","Filter","filterId","Contacts","dispatch","useDispatch","map","onClick","deleteContact","onDeleteContact","Phonebook","useSelector","filterState","contact","length","alert","find","toLowerCase","addContact","setFilter","normalizedFilter","includes","getVisibleContacts","PhoneBookPage","fetchContacts","Helmet"],"sourceRoot":""}